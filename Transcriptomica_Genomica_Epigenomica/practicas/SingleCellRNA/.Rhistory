}
# Random.Theta.Omega fuction:
Random.Theta.Omega(3)
result <- Random.Theta.Omega(4, sparsity = 0.5)
Theta <- result$Theta
Omega <- result$Omega
test_random_theta_omega <- function() {
# Probar con un tamaño pequeño de n
n <- 5
result <- Random.Theta.Omega(n)
# Verificar dimensiones de la salida
stopifnot(ncol(result$Theta) == n && nrow(result$Theta) == n)
stopifnot(length(result$Omega) == n)
# Verificar que la diagonal de Theta no tiene NA
stopifnot(all(!is.na(diag(result$Theta))))
# Verificar que Omega es un vector de longitud n
stopifnot(length(result$Omega) == n)
print("Test Random.Theta.Omega pasó con éxito.")
}
test_random_theta_omega()
# Q.Subdiag fuction:
Q.Subdiag(Theta, i = 2)
# Build.Q fuction:
Q <- Build.Q(Theta)
all.equal(colSums(as.matrix(Q)), rep(0, ncol(Q)))
# Build.Q.Extended fuction:
Q_extended <-Build.Q.Extended(Theta, Omega)
all.equal(colSums(as.matrix(Q_extended)), rep(0, ncol(Q_extended)))
library(Matrix)
# Build.Q.Extended fuction:
Q_extended <-Build.Q.Extended(Theta, Omega)
all.equal(colSums(as.matrix(Q_extended)), rep(0, ncol(Q_extended)))
# Random.Theta.Omega fuction:
Random.Theta.Omega(3)
result <- Random.Theta.Omega(4, sparsity = 0.5)
Theta <- result$Theta
Omega <- result$Omega
# Q.Subdiag fuction:
Q.Subdiag(Theta, i = 2)
# Build.Q fuction:
Q <- Build.Q(Theta)
all.equal(colSums(as.matrix(Q)), rep(0, ncol(Q)))
# Build.Q.Extended fuction:
Q_extended <-Build.Q.Extended(Theta, Omega)
all.equal(colSums(as.matrix(Q_extended)), rep(0, ncol(Q_extended)))
## require("Matrix")
library("Matrix")
#Create a random MHN with (log-transformed) parameters Theta and Omega.
#Sparsity is given as percentage.
Random.Theta.Omega <- function(n, sparsity = 0) {
Theta <- matrix(0, nrow = n, ncol = n)
diag(Theta) <- NA
nonZeros <- sample(which(!is.na(Theta)), size = floor((n^2 - n) * (1 - sparsity)))
Theta[nonZeros] <- rnorm(length(nonZeros))
diag(Theta) <- rnorm(n)
Omega <- exp(rnorm(n))
# Devolver los resultados redondeados
return(list(Theta = round(Theta, 2), Omega = round(Omega, 2)))
}
# Create a single subdiagonal of Q from the ith row in Theta.
# It does not depend from Omega so theres no need to change.
Q.Subdiag <- function(Theta, i){
row <- Theta[i,]
n <- length(row)
# Empieza la subdiagonal con la tasa base de Theta_ii.
s <- exp(row[i])
# Duplica para cada factor Theta_ij, exceptuando cuando i = j.
for(j in 1:n){
s <- c(s, s * exp(row[j]) * (i != j))
}
return(s)
}
#######
## No change
#Build the transition rate matrix Q from its subdiagonals.
Build.Q <- function(Theta){
n <- nrow(Theta)
Subdiags <- c()
for(i in 1:n){
Subdiags <- cbind(Subdiags, Q.Subdiag(Theta, i))
}
Q <- Matrix::bandSparse(2^n, k = -2^(0 : (n-1)), diagonals=Subdiags)
diag(Q) <- -colSums(Q)
return(Q)
}
#########
Build.Q.Extended <- function(Theta, Omega) {
n <- nrow(Theta)
Q <- Build.Q(Theta)
# Crear una matriz binaria que representa todos los estados posibles (2^n filas, n columnas)
states <- matrix(rep(0:(2^n - 1), each = n), ncol = n)
states <- t(apply(states, 1, function(x) as.integer(intToBits(x)[1:n])))  # Binario en forma de matriz
# Vector de productos Omega, cada fila corresponderá a un estado
omega_products <- apply(states, 1, function(state) prod(Omega[which(state == 1)]))
# Crear la matriz U de manera eficiente
U <- Matrix(0, nrow = 2^n, ncol = 2^n)
U[cbind(1:(2^n), 1:(2^n))] <- omega_products  # Asignar los productos en la diagonal
# Calcular T
T <- Q - U
# Crear la matriz Q_bar de tamaño 2^(n+1) x 2^(n+1)
Q_bar <- Matrix(0, nrow = 2^(n+1), ncol = 2^(n+1))
# Llenar las submatrices
Q_bar[1:2^n, 1:2^n] <- T               # T en la parte superior izquierda
Q_bar[(2^n+1):(2^(n+1)), 1:2^n] <- U   # U en la parte inferior izquierda
# Retornar la matriz extendida
return(Q_bar)
}
########
#Get the diagonal of Q.
##No change
Q.Diag <- function(Theta){
n <- ncol(Theta)
dg <- rep(0, 2^n)
for(i in 1:n){
dg <- dg - Q.Subdiag(Theta, i)
}
return(dg)
}
#############
# Learn.Indep modificado para incorporar Omega:
Learn.Indep.Omega <- function(pD, Omega){
n <- log(length(pD), base=2)
Theta <- matrix(0, nrow=n, ncol=n)
# Reorganizar pD según el número de eventos n (se hace un reshape)
pD <- matrix(pD, nrow=2^(n-1), ncol=2, byrow=T)
for(i in 1:n){
# Calcular la probabilidad de que el evento i haya ocurrido (dependiente de Omega)
perc <- sum(pD[, 2]) * Omega[i]  # Incorporando Omega en el cálculo
# La tasa de transición Theta[i, i] depende de Omega y la probabilidad de ocurrencia
Theta[i, i] <- log(perc / (1 - perc))
}
return(round(Theta, 2))
}
# Random.Theta.Omega fuction:
Random.Theta.Omega(3)
result <- Random.Theta.Omega(4, sparsity = 0.5)
Theta <- result$Theta
Omega <- result$Omega
test_random_theta_omega <- function() {
# Probar con un tamaño pequeño de n
n <- 5
result <- Random.Theta.Omega(n)
# Verificar dimensiones de la salida
stopifnot(ncol(result$Theta) == n && nrow(result$Theta) == n)
stopifnot(length(result$Omega) == n)
# Verificar que la diagonal de Theta no tiene NA
stopifnot(all(!is.na(diag(result$Theta))))
# Verificar que Omega es un vector de longitud n
stopifnot(length(result$Omega) == n)
print("Test Random.Theta.Omega pasó con éxito.")
}
test_random_theta_omega()
# Q.Subdiag fuction:
Q.Subdiag(Theta, i = 2)
# Build.Q fuction:
Q <- Build.Q(Theta)
all.equal(colSums(as.matrix(Q)), rep(0, ncol(Q)))
# Build.Q.Extended fuction:
Q_extended <-Build.Q.Extended(Theta, Omega)
all.equal(colSums(as.matrix(Q_extended)), rep(0, ncol(Q_extended)))
require("Matrix")
Random.Theta <- function(n, sparsity=0){
Theta  <- matrix(0,nrow=n,ncol=n)
diag(Theta)  <- NA
nonZeros <- sample(which(!is.na(Theta)), size=(n^2 - n)*(1 - sparsity))
Theta[nonZeros] <- rnorm(length(nonZeros))
diag(Theta) <- rnorm(n)
return(round(Theta,2))
}
Random.Theta.Omega <- function(n, sparsity = 0) {
Theta <- Random.Theta(n, sparsity)
omega_Theta <- matrix(0, nrow = n + 1, ncol = n)
omega_Theta[1:n, ] <- Theta
return(round(omega_Theta, 2))
}
Remove.Last.Row <- function(matrix) {
return(matrix[1:(nrow(matrix) - 1), ])
}
# Create a single subdiagonal of Q from the omega_Theta matrix.
Q.Subdiag <- function(Theta, i){
row <- Theta[i,]
n <- length(row)
s <- exp(row[i])
for(j in 1:n){
s <- c(s, s * exp(row[j]) * (i != j))
}
return(s)
}
#Build the transition rate matrix Q from its subdiagonals.
Build.Q.Extended <- function(omega_Theta){
extra_row <- omega_Theta[nrow(omega_Theta), ]
n <- nrow(Theta)
Subdiags <- c()
for(i in 1:n){
Subdiags <- cbind(Subdiags, Q.Subdiag(Theta, i))
}
Q <- Matrix::bandSparse(2^n, k = -2^(0 : (n-1)), diagonals=Subdiags)
diag(Q) <- -Matrix::colSums(Q)
Q_extended <- Matrix::bdiag(Q, extra_row)
return(Q_extended)
}
#Get the diagonal of Q.
Q.Diag <- function(omega_Theta) {
Theta <- Remove.Last.Row(omega_Theta)
n <- ncol(Theta)
dg <- rep(0, 2^n)
for(i in 1:n) {
dg <- dg - Q.Subdiag(Theta, i)
}
return(dg)
}
####################################################
########################TEST########################
####################################################
# Generar omega_Theta
omega_Theta <- Random.Theta.Omega(n = 2, sparsity = 0.3)
Theta <- Remove.Last.Row(omega_Theta)
# Construir la matriz Q
Q_matrix <- Build.Q.Extended(omega_Theta)
# Ver la matriz resultante Q
print(Q_matrix)
## require("Matrix")
library("Matrix")
#Create a random MHN with (log-transformed) parameters Theta and Omega.
#Sparsity is given as percentage.
Random.Theta.Omega <- function(n, sparsity = 0) {
Theta <- matrix(0, nrow = n, ncol = n)
diag(Theta) <- NA
nonZeros <- sample(which(!is.na(Theta)), size = floor((n^2 - n) * (1 - sparsity)))
Theta[nonZeros] <- rnorm(length(nonZeros))
diag(Theta) <- rnorm(n)
Omega <- exp(rnorm(n))
# Devolver los resultados redondeados
return(list(Theta = round(Theta, 2), Omega = round(Omega, 2)))
}
# Create a single subdiagonal of Q from the ith row in Theta.
# It does not depend from Omega so theres no need to change.
Q.Subdiag <- function(Theta, i){
row <- Theta[i,]
n <- length(row)
# Empieza la subdiagonal con la tasa base de Theta_ii.
s <- exp(row[i])
# Duplica para cada factor Theta_ij, exceptuando cuando i = j.
for(j in 1:n){
s <- c(s, s * exp(row[j]) * (i != j))
}
return(s)
}
#######
## No change
#Build the transition rate matrix Q from its subdiagonals.
Build.Q <- function(Theta){
n <- nrow(Theta)
Subdiags <- c()
for(i in 1:n){
Subdiags <- cbind(Subdiags, Q.Subdiag(Theta, i))
}
Q <- Matrix::bandSparse(2^n, k = -2^(0 : (n-1)), diagonals=Subdiags)
diag(Q) <- -colSums(Q)
return(Q)
}
#########
Build.Q.Extended <- function(Theta, Omega) {
n <- nrow(Theta)
Q <- Build.Q(Theta)
# Crear una matriz binaria que representa todos los estados posibles (2^n filas, n columnas)
states <- matrix(rep(0:(2^n - 1), each = n), ncol = n)
states <- t(apply(states, 1, function(x) as.integer(intToBits(x)[1:n])))  # Binario en forma de matriz
# Vector de productos Omega, cada fila corresponderá a un estado
omega_products <- apply(states, 1, function(state) prod(Omega[which(state == 1)]))
# Crear la matriz U de manera eficiente
U <- Matrix(0, nrow = 2^n, ncol = 2^n)
U[cbind(1:(2^n), 1:(2^n))] <- omega_products  # Asignar los productos en la diagonal
# Calcular T
T <- Q - U
# Crear la matriz Q_bar de tamaño 2^(n+1) x 2^(n+1)
Q_bar <- Matrix(0, nrow = 2^(n+1), ncol = 2^(n+1))
# Llenar las submatrices
Q_bar[1:2^n, 1:2^n] <- T               # T en la parte superior izquierda
Q_bar[(2^n+1):(2^(n+1)), 1:2^n] <- U   # U en la parte inferior izquierda
# Retornar la matriz extendida
return(Q_bar)
}
########
#Get the diagonal of Q.
##No change
Q.Diag <- function(Theta){
n <- ncol(Theta)
dg <- rep(0, 2^n)
for(i in 1:n){
dg <- dg - Q.Subdiag(Theta, i)
}
return(dg)
}
#############
# Learn.Indep modificado para incorporar Omega:
Learn.Indep.Omega <- function(pD, Omega){
n <- log(length(pD), base=2)
Theta <- matrix(0, nrow=n, ncol=n)
# Reorganizar pD según el número de eventos n (se hace un reshape)
pD <- matrix(pD, nrow=2^(n-1), ncol=2, byrow=T)
for(i in 1:n){
# Calcular la probabilidad de que el evento i haya ocurrido (dependiente de Omega)
perc <- sum(pD[, 2]) * Omega[i]  # Incorporando Omega en el cálculo
# La tasa de transición Theta[i, i] depende de Omega y la probabilidad de ocurrencia
Theta[i, i] <- log(perc / (1 - perc))
}
return(round(Theta, 2))
}
#######################################
############TEST#######################
#######################################
# Random.Theta.Omega fuction:
Random.Theta.Omega(3)
result <- Random.Theta.Omega(4, sparsity = 0.5)
Theta <- result$Theta
Omega <- result$Omega
#######################################################
######## Test para Random.Theta.Omega ##################
#######################################################
test_random_theta_omega <- function() {
# Probar con un tamaño pequeño de n
n <- 5
result <- Random.Theta.Omega(n)
# Verificar dimensiones de la salida
stopifnot(ncol(result$Theta) == n && nrow(result$Theta) == n)
stopifnot(length(result$Omega) == n)
# Verificar que la diagonal de Theta no tiene NA
stopifnot(all(!is.na(diag(result$Theta))))
# Verificar que Omega es un vector de longitud n
stopifnot(length(result$Omega) == n)
print("Test Random.Theta.Omega pasó con éxito.")
}
test_random_theta_omega()
#########################################################
#########################################################
# Q.Subdiag fuction:
Q.Subdiag(Theta, i = 2)
# Build.Q fuction:
Q <- Build.Q(Theta)
all.equal(colSums(as.matrix(Q)), rep(0, ncol(Q)))
# Build.Q.Extended fuction:
Q_extended <-Build.Q.Extended(Theta, Omega)
all.equal(colSums(as.matrix(Q_extended)), rep(0, ncol(Q_extended)))
require("Matrix")
Random.Theta <- function(n, sparsity=0){
Theta  <- matrix(0,nrow=n,ncol=n)
diag(Theta)  <- NA
nonZeros <- sample(which(!is.na(Theta)), size=(n^2 - n)*(1 - sparsity))
Theta[nonZeros] <- rnorm(length(nonZeros))
diag(Theta) <- rnorm(n)
return(round(Theta,2))
}
Random.Theta.Omega <- function(n, sparsity = 0) {
Theta <- Random.Theta(n, sparsity)
omega_Theta <- matrix(0, nrow = n + 1, ncol = n)
omega_Theta[1:n, ] <- Theta
return(round(omega_Theta, 2))
}
Q.Subdiag <- function(Theta, i){
row <- Theta[i,]
n <- length(row)
s <- exp(row[i])
for(j in 1:n){
s <- c(s, s * exp(row[j]) * (i != j))
}
return(s)
}
Remove.Last.Row <- function(matrix) {
# Elimina la última fila de la matriz
return(matrix[1:(nrow(matrix) - 1), ])
}
Build.Q.Extended <- function(Theta, Omega) {
n <- nrow(Theta)
Q <- Build.Q(Theta)
states <- matrix(rep(0:(2^n - 1), each = n), ncol = n)
states <- t(apply(states, 1, function(x) as.integer(intToBits(x)[1:n])))
omega_products <- apply(states, 1, function(state) prod(Omega[which(state == 1)]))
U <- Matrix(0, nrow = 2^n, ncol = 2^n)
U[cbind(1:(2^n), 1:(2^n))] <- omega_products
T <- Q - U
Q_bar <- Matrix(0, nrow = 2^(n+1), ncol = 2^(n+1))
# Llenar las submatrices
Q_bar[1:2^n, 1:2^n] <- T
Q_bar[(2^n+1):(2^(n+1)), 1:2^n] <- U
return(Q_bar)
}
Q.Diag <- function(omega_Theta) {
Theta <- Remove.Last.Row(omega_Theta)
n <- ncol(Theta)
dg <- rep(0, 2^n)
for(i in 1:n) {
dg <- dg - Q.Subdiag(Theta, i)
}
return(dg)
}
# Generar omega_Theta
omega_Theta <- Random.Theta.Omega(n = 2, sparsity = 0.3)
Theta <- Remove.Last.Row(omega_Theta)
# Construir la matriz Q y verla
Q_matrix <- Build.Q.Extended(omega_Theta)
data <- read.csv("../Datos/tinydata.csv")
# Lista de genotipos y sus datos
genotypes <- c('Z', 'a', 'D', 'c')
data_manual <- matrix(c(
0, 0, 1, 1,
1, 1, 0, 0,
1, 1, 1, 1,
0, 0, 0, 0,
1, 0, 0, 0,
0, 1, 0, 0,
0, 1, 0, 0
), nrow = 7, byrow = TRUE)
#Convertir a dataframe
data_manual <- as.data.frame(data_manual)
colnames(data_manual) <- genotypes
# Contar la cantidad de mutaciones en cada columna de data
mutations_count <- colSums(data)
# Crear el histograma (gráfico de barras)
barplot(mutations_count,
main = "Number of mutations per gene",
xlab = "Gen",
ylab = "Number of mutations",
col = "pink")
# Contar la cantidad de mutaciones en cada columna de data_manual
mutations_count <- colSums(data_manual)
# Crear el histograma (gráfico de barras)
barplot(mutations_count,
main = "Number of mutations per gene",
xlab = "Gen",
ylab = "Number of mutations",
col = "skyblue")
# Inicializar un vector para las combinaciones
combinations <- list()
genotypes <- colnames(data)
# Recorrer las filas de datos
for (i in 1:nrow(data)) {
# Crear la combinación de genotipos presentes
combination <- genotypes[which(data[i, ] == 1)]
if (length(combination) == 0) {
combination <- "WT"  # Para el caso donde no hay genotipos presentes
} else {
combination <- paste(sort(combination), collapse = ', ')  # Ordenar y unir
}
combinations[[i]] <- combination
}
# Contar las ocurrencias de cada combinación
counts <- table(unlist(combinations))
# Crear un data frame con index, genotype y counts
result <- data.frame(
Index = 1:length(counts),
Genotype = names(counts),
Counts = as.integer(counts)
)
# Dibujar el histograma en color naranja
barplot(counts,
col = "orange",
main = "Genotype's counts",
xlab = "Genotypes combinations",
ylab = "Frecuency",
las = 2,
border = "black",
ylim = c(0, max(counts) + 1))
# Ejecutar el modelo MHN
results_mhn <- evam(data,                   # Datos de entrada
methods = c("MHN"),                       # Usamos el modelo MHN
mhn_opts = list(lambda =1/nrow(data)),    #Ajustable
cores = 2)
install.packages("palmerpenguins")
install.packages("quarto")
library(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
install.packages("usethis")
install.packages("maPooling")
BiocManager
(c("downloader","dplyr","lattice","beeswarm","WDI","ggplot2","ShortRead"))
library(dplyr)
#install.packages(c("downloader","dplyr","lattice","beeswarm","WDI","ggplot2","ShortRead"))
library(dplyr)
install.packages(c("downloader","dplyr","lattice","beeswarm","WDI","ggplot2","ShortRead"))
pheno=read.csv("mice_pheno.csv")
install.packages("BiocManager")
BiocManager::install("SpikeInSubset")
# Load libraries
library(SpikeInSubset)
library(genefilter)
BiocManager::install("SpikeInSubset")
# Load libraries
library(SpikeInSubset)
library(genefilter)
BiocManager::install("SpikeInSubset")
BiocManager::install("SpikeInSubset")
BiocManager::install("SpikeInSubset", force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
projectPath <- file.path("C:\Users/Sandra/Documents/GitHub/apuntes-bioinfo/Transcriptomica_Genomica_Epigenomica/practicas/SingleCellRNA/")
analysisPath <- file.path(projectPath,analysisDir)
projectPath <- file.path("C:\Users/Sandra/Documents/GitHub/apuntes-bioinfo/Transcriptomica_Genomica_Epigenomica/practicas/SingleCellRNA/")
projectPath <- file.path("C:/Users/Sandra/Documents/GitHub/apuntes-bioinfo/Transcriptomica_Genomica_Epigenomica/practicas/SingleCellRNA/")
analysisDir <- "SC.Analysis"
analysisPath <- file.path(projectPath,analysisDir)
outputDir <- "SC.Analysis.GSE128639"
outputPath <- file.path(analysisPath, outputDir)
dataDir <- "GSE128639_10XGenomics/outs"
dataPath <- file.path(projectPath, dataDir)
prefix <- "GSE128639.RNA"
setwd("~/GitHub/apuntes-bioinfo/Transcriptomica_Genomica_Epigenomica/practicas/SingleCellRNA")
setwd(projectPath)
BiocManager::install(c("scran", "scuttle", "biomaRt"), type="binary")
install.packages(c("Seurat", "gtools"))
